public class CWE78_OS_Command_Injection__connect_tcp_74a extends testcasesupport.AbstractTestCase
{

    public void <init>()
    {
        CWE78_OS_Command_Injection__connect_tcp_74a r0;

        r0 := @this: CWE78_OS_Command_Injection__connect_tcp_74a;

        specialinvoke r0.<testcasesupport.AbstractTestCase: void <init>()>();

        return;
    }

    public void bad() throws java.lang.Throwable
    {
        CWE78_OS_Command_Injection__connect_tcp_74a r0;
        java.net.Socket $r2, r41;
        java.io.InputStreamReader $r3, r43;
        java.io.InputStream $r4;
        java.io.BufferedReader $r5, r42;
        java.lang.Throwable $r9;
        java.io.IOException $r10, $r13, $r16, $r19, $r22, $r25, $r28, $r31, $r34, $r37;
        java.util.logging.Level $r11, $r14, $r17, $r20, $r23, $r26, $r29, $r32, $r35, $r38;
        java.util.logging.Logger $r12, $r15, $r18, $r21, $r24, $r27, $r30, $r33, $r36, $r39;
        java.lang.String r40;
        java.util.HashMap $r54;
        java.lang.Integer $r56, $r57, $r58;
        testcases.CWE78_OS_Command_Injection.CWE78_OS_Command_Injection__connect_tcp_74b $r59;

        r0 := @this: CWE78_OS_Command_Injection__connect_tcp_74a;

        r40 = "";

        r41 = null;

        r42 = null;

        r43 = null;

     label01:
        $r2 = new java.net.Socket;

        specialinvoke $r2.<java.net.Socket: void <init>(java.lang.String,int)>("host.example.org", 39544);

        r41 = $r2;

        $r3 = new java.io.InputStreamReader;

        $r4 = virtualinvoke $r2.<java.net.Socket: java.io.InputStream getInputStream()>();

        specialinvoke $r3.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.lang.String)>($r4, "UTF-8");

        r43 = $r3;

        $r5 = new java.io.BufferedReader;

        specialinvoke $r5.<java.io.BufferedReader: void <init>(java.io.Reader)>($r3);

        r42 = $r5;

        r40 = virtualinvoke $r5.<java.io.BufferedReader: java.lang.String readLine()>();

     label02:
        if $r5 == null goto label03;

        virtualinvoke $r5.<java.io.BufferedReader: void close()>();

     label03:
        goto label05;

     label04:
        $r13 := @caughtexception;

        $r15 = <testcasesupport.IO: java.util.logging.Logger logger>;

        $r14 = <java.util.logging.Level: java.util.logging.Level WARNING>;

        virtualinvoke $r15.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r14, "Error closing BufferedReader", $r13);

     label05:
        if $r3 == null goto label06;

        virtualinvoke $r3.<java.io.InputStreamReader: void close()>();

     label06:
        goto label08;

     label07:
        $r22 := @caughtexception;

        $r24 = <testcasesupport.IO: java.util.logging.Logger logger>;

        $r23 = <java.util.logging.Level: java.util.logging.Level WARNING>;

        virtualinvoke $r24.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r23, "Error closing InputStreamReader", $r22);

     label08:
        if $r2 == null goto label09;

        virtualinvoke $r2.<java.net.Socket: void close()>();

     label09:
        goto label32;

     label10:
        $r31 := @caughtexception;

        $r33 = <testcasesupport.IO: java.util.logging.Logger logger>;

        $r32 = <java.util.logging.Level: java.util.logging.Level WARNING>;

        virtualinvoke $r33.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r32, "Error closing Socket", $r31);

        goto label32;

     label11:
        $r34 := @caughtexception;

        $r36 = <testcasesupport.IO: java.util.logging.Logger logger>;

        $r35 = <java.util.logging.Level: java.util.logging.Level WARNING>;

        virtualinvoke $r36.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r35, "Error with stream reading", $r34);

     label12:
        if r42 == null goto label13;

        virtualinvoke r42.<java.io.BufferedReader: void close()>();

     label13:
        goto label15;

     label14:
        $r25 := @caughtexception;

        $r27 = <testcasesupport.IO: java.util.logging.Logger logger>;

        $r26 = <java.util.logging.Level: java.util.logging.Level WARNING>;

        virtualinvoke $r27.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r26, "Error closing BufferedReader", $r25);

     label15:
        if r43 == null goto label16;

        virtualinvoke r43.<java.io.InputStreamReader: void close()>();

     label16:
        goto label18;

     label17:
        $r19 := @caughtexception;

        $r21 = <testcasesupport.IO: java.util.logging.Logger logger>;

        $r20 = <java.util.logging.Level: java.util.logging.Level WARNING>;

        virtualinvoke $r21.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r20, "Error closing InputStreamReader", $r19);

     label18:
        if r41 == null goto label19;

        virtualinvoke r41.<java.net.Socket: void close()>();

     label19:
        goto label32;

     label20:
        $r37 := @caughtexception;

        $r39 = <testcasesupport.IO: java.util.logging.Logger logger>;

        $r38 = <java.util.logging.Level: java.util.logging.Level WARNING>;

        virtualinvoke $r39.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r38, "Error closing Socket", $r37);

        goto label32;

     label21:
        $r9 := @caughtexception;

     label22:
        if r42 == null goto label23;

        virtualinvoke r42.<java.io.BufferedReader: void close()>();

     label23:
        goto label25;

     label24:
        $r10 := @caughtexception;

        $r12 = <testcasesupport.IO: java.util.logging.Logger logger>;

        $r11 = <java.util.logging.Level: java.util.logging.Level WARNING>;

        virtualinvoke $r12.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r11, "Error closing BufferedReader", $r10);

     label25:
        if r43 == null goto label26;

        virtualinvoke r43.<java.io.InputStreamReader: void close()>();

     label26:
        goto label28;

     label27:
        $r28 := @caughtexception;

        $r30 = <testcasesupport.IO: java.util.logging.Logger logger>;

        $r29 = <java.util.logging.Level: java.util.logging.Level WARNING>;

        virtualinvoke $r30.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r29, "Error closing InputStreamReader", $r28);

     label28:
        if r41 == null goto label29;

        virtualinvoke r41.<java.net.Socket: void close()>();

     label29:
        goto label31;

     label30:
        $r16 := @caughtexception;

        $r18 = <testcasesupport.IO: java.util.logging.Logger logger>;

        $r17 = <java.util.logging.Level: java.util.logging.Level WARNING>;

        virtualinvoke $r18.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r17, "Error closing Socket", $r16);

     label31:
        throw $r9;

     label32:
        $r54 = new java.util.HashMap;

        specialinvoke $r54.<java.util.HashMap: void <init>()>();

        $r56 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        virtualinvoke $r54.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r56, r40);

        $r57 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        virtualinvoke $r54.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r57, r40);

        $r58 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        virtualinvoke $r54.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r58, r40);

        $r59 = new testcases.CWE78_OS_Command_Injection.CWE78_OS_Command_Injection__connect_tcp_74b;

        specialinvoke $r59.<testcases.CWE78_OS_Command_Injection.CWE78_OS_Command_Injection__connect_tcp_74b: void <init>()>();

        virtualinvoke $r59.<testcases.CWE78_OS_Command_Injection.CWE78_OS_Command_Injection__connect_tcp_74b: void badSink(java.util.HashMap)>($r54);

        return;

        catch java.io.IOException from label02 to label03 with label04;
        catch java.io.IOException from label05 to label06 with label07;
        catch java.io.IOException from label08 to label09 with label10;
        catch java.io.IOException from label01 to label02 with label11;
        catch java.io.IOException from label12 to label13 with label14;
        catch java.io.IOException from label15 to label16 with label17;
        catch java.io.IOException from label18 to label19 with label20;
        catch java.lang.Throwable from label01 to label02 with label21;
        catch java.lang.Throwable from label11 to label12 with label21;
        catch java.io.IOException from label22 to label23 with label24;
        catch java.io.IOException from label25 to label26 with label27;
        catch java.io.IOException from label28 to label29 with label30;
        catch java.lang.Throwable from label21 to label22 with label21;
    }

    public void good() throws java.lang.Throwable
    {
        CWE78_OS_Command_Injection__connect_tcp_74a r0;
        testcases.CWE78_OS_Command_Injection.CWE78_OS_Command_Injection__connect_tcp_74a r1;

        r0 := @this: CWE78_OS_Command_Injection__connect_tcp_74a;

        r1 = (testcases.CWE78_OS_Command_Injection.CWE78_OS_Command_Injection__connect_tcp_74a) r0;

        specialinvoke r1.<testcases.CWE78_OS_Command_Injection.CWE78_OS_Command_Injection__connect_tcp_74a: void goodG2B()>();

        return;
    }

    private void goodG2B() throws java.lang.Throwable
    {
        CWE78_OS_Command_Injection__connect_tcp_74a r0;
        java.util.HashMap $r3;
        java.lang.Integer $r4, $r6, $r8;
        testcases.CWE78_OS_Command_Injection.CWE78_OS_Command_Injection__connect_tcp_74b $r10;

        r0 := @this: CWE78_OS_Command_Injection__connect_tcp_74a;

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        virtualinvoke $r3.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, "foo");

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        virtualinvoke $r3.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, "foo");

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        virtualinvoke $r3.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r8, "foo");

        $r10 = new testcases.CWE78_OS_Command_Injection.CWE78_OS_Command_Injection__connect_tcp_74b;

        specialinvoke $r10.<testcases.CWE78_OS_Command_Injection.CWE78_OS_Command_Injection__connect_tcp_74b: void <init>()>();

        virtualinvoke $r10.<testcases.CWE78_OS_Command_Injection.CWE78_OS_Command_Injection__connect_tcp_74b: void goodG2BSink(java.util.HashMap)>($r3);

        return;
    }

    public static void main(java.lang.String[]) throws java.lang.ClassNotFoundException, java.lang.InstantiationException, java.lang.IllegalAccessException
    {
        java.lang.String[] r0;

        r0 := @parameter0: java.lang.String[];

        staticinvoke <testcases.CWE78_OS_Command_Injection.CWE78_OS_Command_Injection__connect_tcp_74a: void mainFromParent(java.lang.String[])>(r0);

        return;
    }
}
